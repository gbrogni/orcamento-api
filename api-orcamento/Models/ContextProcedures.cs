// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using api_orcamento.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace api_orcamento.Models
{
    public partial class Context
    {
        private IContextProcedures _procedures;

        public virtual IContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
        }
    }

    public partial class ContextProcedures : IContextProcedures
    {
        private readonly Context _context;

        public ContextProcedures(Context context)
        {
            _context = context;
        }

        public virtual async Task<int> gravaCustoItensFaturadosAsync(int? codEmpresa, DateTime? dataDe, DateTime? dataAte, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codEmpresa",
                    Value = codEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dataDe",
                    Value = dataDe ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "dataAte",
                    Value = dataAte ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[gravaCustoItensFaturados] @codEmpresa, @dataDe, @dataAte", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
